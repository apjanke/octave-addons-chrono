This is chrono.info, produced by makeinfo version 6.6 from chrono.texi.

This manual is for Chrono, version 0.3.1.

   Copyright © 2019 Andrew Janke

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     that the entire resulting derived work is distributed under the
     terms of a permission notice identical to this one.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the same conditions as for
     modified versions.


File: chrono.info,  Node: Top,  Next: Introduction

Chrono for GNU Octave
*********************

This manual is for Chrono, version 0.3.1.

* Menu:

* Introduction::
* Getting Started::
* Date Representation::
* Time Zones::
* Durations::
* Missing Functionality::
* Function Reference::
* Copying::


File: chrono.info,  Node: Introduction,  Next: Getting Started,  Up: Top

1 Introduction
**************

     Time is an illusion.  Lunchtime doubly so.

                           — _Douglas Adams_

   This is the manual for the Chrono package version 0.3.1 for GNU
Octave.

   This document is a work in progress.  You are invited to help improve
it and submit patches.

   Chrono provides date/time functionality for Octave by supplying
Matlab-compatible implementations for the ‘datetime’, ‘duration’, and
‘calendarDuration’ classes, along with related functions.

   Chrono’s classes are designed to be convenient to use while still
being efficient.  The data representations used by Chrono are designed
to be efficient and suitable for working with large-ish data sets.  A
“large-ish” data set is one that can have millions of elements or rows,
but still fits in main computer memory.  Chrono’s main relational and
arithmetic operations are all implemented using vectorized operations on
primitive Octave data types.

   Chrono was written by Andrew Janke <<floss@apjanke.net>>.  Support
can be found on the Chrono project GitHub page
(https://github.com/apjanke/octave-chrono).


File: chrono.info,  Node: Getting Started,  Next: Date Representation,  Prev: Introduction,  Up: Top

2 Getting Started
*****************

The easiest way to obtain Chrono is by using Octave’s ‘pkg’ package
manager.  To install the a development prerelease of Chrono, run this in
Octave:

     pkg install https://github.com/apjanke/octave-chrono/releases/download/v0.3.1/chrono-0.3.1.tar.gz

   (Check the releases page at
<https://github.com/apjanke/octave-chrono/releases> to find out what the
actual latest release number is.)

   For development, you can obtain the source code for Chrono from the
project repo on GitHub at <https://github.com/apjanke/octave-chrono>.
Upon first installation, run the ‘octave_chrono_make_local’ script to
build the octfiles so Chrono will work.  Then add the ‘inst’ directory
in the repo to your Octave path.


File: chrono.info,  Node: Date Representation,  Next: Time Zones,  Prev: Getting Started,  Up: Top

3 Date Representation
*********************

Chrono provides the ‘datetime’ class for representing points in time.

* Menu:

* datetime Class::


File: chrono.info,  Node: datetime Class,  Up: Date Representation

3.1 ‘datetime’ Class
====================

A ‘datetime’ is an array object that represents points in time in the
familiar Gregorian calendar.

   This is an attempt to reproduce the functionality of Matlab’s
‘datetime’.  It also contains some Octave-specific extensions.

   The underlying representation is that of a datenum (a ‘double’
containing the number of days since the Matlab epoch), but encapsulating
it in an object provides several benefits: friendly human-readable
display, type safety, automatic type conversion, and time zone support.
In addition to the underlying datenum array, a ‘datetime’ inclues an
optional ‘TimeZone’ property indicating what time zone the datetimes are
in.

* Menu:

* datenum Compatibility::


File: chrono.info,  Node: datenum Compatibility,  Up: datetime Class

3.1.1 ‘datenum’ Compatibility
-----------------------------

While the underlying data representation of ‘datetime’ is compatible
with (in fact, identical to) that of datenums, you cannot directly
combine them via assignment, concatenation, or most arithmetic
operations.

   This is because of the signature of the ‘datetime’ constructor.  When
combining objects and primitive types like ‘double’, the primitive type
is promoted to an object by calling the other object’s one-argument
constructor on it.  However, the one-argument numeric-input consstructor
for ‘datetime’ does not accept datenums: it interprets its input as
datevecs instead.  This is due to a design decision on Matlab’s part;
for compatibility, Octave does not alter that interface.

   To combine ‘datetime’s with datenums, you can convert the datenums to
‘datetime’s by calling ‘datetime.ofDatenum’ or ‘datetime(x,
'ConvertFrom', 'datenum')’, or you can convert the ‘datetime’s to
datenums by accessing its ‘dnums’ field with ‘x.dnums’.

   Examples:

     dt = datetime('2011-03-04')
     dn = datenum('2017-01-01')
     [dt dn]
         ⇒ error: datenum: expected date vector containing [YEAR, MONTH, DAY, HOUR, MINUTE, SECOND]
     [dt datetime.ofDatenum(dn)]
         ⇒ 04-Mar-2011   01-Jan-2017

   Also, if you have a zoned ‘datetime’, you can’t combine it with a
datenum, because datenums do not carry time zone information.


File: chrono.info,  Node: Time Zones,  Next: Durations,  Prev: Date Representation,  Up: Top

4 Time Zones
************

Chrono has support for representing dates in time zones and for
converting between time zones.

   A ‘datetime’ may be "zoned" or "zoneless".  A zoneless ‘datetime’
does not have a time zone associated with it.  This is represented by an
empty ‘TimeZone’ property on the ‘datetime’ object.  A zoneless
‘datetime’ represents the local time in some unknown time zone, and
assumes a continuous time scale (no DST shifts).

   A zoned ‘datetime’ is associated with a time zone.  It is represented
by having the time zone’s IANA zone identifier (e.g.  ‘'UTC'’ or
‘'America/New_York'’) in its ‘TimeZone’ property.  A zoned ‘datetime’
represents the local time in that time zone.

   By default, the ‘datetime’ constructor creates unzoned ‘datetime’s.
To make a zoned ‘datetime’, either pass the ‘'TimeZone'’ option to the
constructor, or set the ‘TimeZone’ property after object creation.
Setting the ‘TimeZone’ property on a zoneless ‘datetime’ declares that
it’s a local time in that time zone.  Setting the ‘TimeZone’ property on
a zoned ‘datetime’ turns it back into a zoneless ‘datetime’ without
changing the local time it represents.

   You can tell a zoned from a zoneless time zone in the object display
because the time zone is included for zoned ‘datetime’s.

     % Create an unzoned datetime
     d = datetime('2011-03-04 06:00:00')
         ⇒  04-Mar-2011 06:00:00

     % Create a zoned datetime
     d_ny = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/New_York')
         ⇒  04-Mar-2011 06:00:00 America/New_York
     % This is equivalent
     d_ny = datetime('2011-03-04 06:00:00');
     d_ny.TimeZone = 'America/New_York'
         ⇒  04-Mar-2011 06:00:00 America/New_York

     % Convert it to Chicago time
     d_chi.TimeZone = 'America/Chicago'
         ⇒  04-Mar-2011 05:00:00 America/Chicago

   When you combine two zoned ‘datetime’s via concatenation, assignment,
or arithmetic, if their time zones differ, they are converted to the
time zone of the left-hand input.

     d_ny = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/New_York')
     d_la = datetime('2011-03-04 06:00:00', 'TimeZone', 'America/Los_Angeles')
     d_la - d_ny
         ⇒ 03:00:00

   You cannot combine a zoned and an unzoned ‘datetime’.  This results
in an error being raised.

     Warning: Normalization of "nonexistent" times (like between 02:00
     and 03:00 on a "spring forward" DST change day) is not implemented
     yet.  The results of converting a zoneless local time into a time
     zone where that local time did not exist are currently undefined.

* Menu:

* Defined Time Zones::


File: chrono.info,  Node: Defined Time Zones,  Up: Time Zones

4.1 Defined Time Zones
======================

Chrono’s time zone data is drawn from the IANA Time Zone Database
(https://www.iana.org/time-zones), also known as the “Olson Database”.
Chrono includes a copy of this database in its distribution so it can
work on Windows, which does not supply it like Unix systems do.

   You can use the ‘timezones’ function to list the time zones known to
Chrono.  These will be all the time zones in the IANA database on your
system (for Linux and macOS) or in the IANA time zone database
redistributed with Chrono (for Windows).

     Note: The IANA Time Zone Database only covers dates from about the
     year 1880 to 2038.  Converting time zones for ‘datetime’s outside
     that range is currently unimplemented.  (Chrono needs to add
     support for proleptic POSIX time zone rules, which are used to
     govern behavior outside that date range.)


File: chrono.info,  Node: Durations,  Next: Missing Functionality,  Prev: Time Zones,  Up: Top

5 Durations
***********

* Menu:

* duration Class::
* calendarDuration Class::


File: chrono.info,  Node: duration Class,  Next: calendarDuration Class,  Up: Durations

5.1 ‘duration’ Class
====================

A ‘duration’ represents a period of time in fixed-length seconds (or
minutes, hours, or whatever you want to measure it in.)

   A ‘duration’ has a resolution of about a nanosecond for typical
dates.  The underlying representation is a ‘double’ representing the
number of days elapsed, similar to a datenum, except it’s interpreted as
relative to some other reference point you provide, instead of being
relative to the Matlab/Octave epoch.

   You can add or subtract a ‘duration’ to a ‘datetime’ to get another
‘datetime’.  You can also add or subtract ‘durations’ to each other.


File: chrono.info,  Node: calendarDuration Class,  Prev: duration Class,  Up: Durations

5.2 ‘calendarDuration’ Class
============================

A ‘calendarDuration’ represents a period of time in variable-length
calendar components.  For example, years and months can have varying
numbers of days, and days in time zones with Daylight Saving Time have
varying numbers of hours.  A ‘calendarDuration’ does arithmetic with
"whole" calendar periods.

   ‘calendarDuration’s and ‘duration’s cannot be directly combined,
because they are not semantically equivalent.  (This may be relaxed in
the future to allow ‘duration’s to be interpreted as numbers of days
when combined with ‘calendarDuration’s.)

     d = datetime('2011-03-04 00:00:00')
         ⇒ 04-Mar-2011
     cdur = calendarDuration(1, 3, 0)
         ⇒ 1y 3mo
     d2 = d + cdur
         ⇒ 04-Jun-2012


File: chrono.info,  Node: Missing Functionality,  Next: Function Reference,  Prev: Durations,  Up: Top

6 Missing Functionality
***********************

Chrono is based on Matlab’s date/time API and supports most of its major
functionality.  But not all of it is implemented yet.  The missing parts
are currently:

   • POSIX time zone support for years outside the IANA time zone
     database coverage
   • Week-of-year (ISO calendar) calculations
   • Various ‘'ConvertFrom'’ forms for ‘datetime’ and ‘duration’
   • Support for LDML formatting for ‘datetime’
   • Various functions: ‘between’, ‘caldiff’, ‘dateshift’, ‘week’
   • ‘isdst’, ‘isweekend’
   • ‘calendarDuration.split’
   • ‘duration.Format’ support
   • ‘UTCOffset’ and ‘DSTOffset’ fields in the output of ‘timezones()’
   • Plotting support

   It is the author’s hope that all these will be implemented some day.


File: chrono.info,  Node: Function Reference,  Next: Copying,  Prev: Missing Functionality,  Up: Top

7 Function Reference
********************

* Menu:

* Functions by Category::
* Functions Alphabetically::


File: chrono.info,  Node: Functions by Category,  Next: Functions Alphabetically,  Up: Function Reference

7.1 Functions by Category
=========================

7.1.1 Date Representation
-------------------------

*note datetime::
     ’datetime’ represents points in time using the Gregorian calendar.

*note isdatetime::
     True if input is a ’datetime’ array, false otherwise.

*note NaT::
     “Not-a-Time”.

7.1.2 Durations
---------------

*note calendarDuration::
     Durations of time using variable-length calendar periods, such as
     days, months, and years, which may vary in length over time.

*note calmonths::
     Create a ’calendarDuration’ that is a given number of calendar
     months long.

*note calyears::
     Construct a ’calendarDuration’ a given number of years long.

*note days::
     Duration in days.

*note duration::
     Represents durations or periods of time as an amount of
     fixed-length time (i.e.

*note hours::
     Create a ’duration’ X hours long, or get the hours in a ’duration’
     X.

*note isduration::
     True if input is a ’duration’ array, false otherwise.

*note milliseconds::
     Create a ’duration’ X milliseconds long, or get the milliseconds in
     a ’duration’ X.

*note minutes::
     Create a ’duration’ X hours long, or get the hours in a ’duration’
     X.

*note seconds::
     Create a ’duration’ X seconds long, or get the seconds in a
     ’duration’ X.

*note timezones::
     List all the time zones defined on this system.

*note years::
     Create a ’duration’ X years long, or get the years in a ’duration’
     X.


File: chrono.info,  Node: Functions Alphabetically,  Prev: Functions by Category,  Up: Function Reference

7.2 Functions Alphabetically
============================

* Menu:

* calendarDuration::	Durations of time using variable-length calendar
		periods, such as days, months, and years, which may vary in
		length over time.
* calmonths::	Create a ’calendarDuration’ that is a given number of
		calendar months long.
* calyears::	Construct a ’calendarDuration’ a given number of years
		long.
* datetime::	’datetime’ represents points in time using the Gregorian
		calendar.
* days::	Duration in days.
* duration::	Represents durations or periods of time as an amount of
		fixed-length time (i.e.
* hours::	Create a ’duration’ X hours long, or get the hours in a
		’duration’ X.
* isdatetime::	True if input is a ’datetime’ array, false otherwise.
* isduration::	True if input is a ’duration’ array, false otherwise.
* milliseconds::	Create a ’duration’ X milliseconds long, or get the
		milliseconds in a ’duration’ X.
* minutes::	Create a ’duration’ X hours long, or get the hours in a
		’duration’ X.
* NaT:: “Not-a-Time”.
* seconds::	Create a ’duration’ X seconds long, or get the seconds in a
		’duration’ X.
* timezones::	List all the time zones defined on this system.
* years::	Create a ’duration’ X years long, or get the years in a
		’duration’ X.


File: chrono.info,  Node: calendarDuration,  Next: calmonths,  Up: Functions Alphabetically

7.2.1 calendarDuration
----------------------

 -- Class: calendarDuration

     Durations of time using variable-length calendar periods, such as
     days, months, and years, which may vary in length over time.  (For
     example, a calendar month may have 28, 30, or 31 days.)

 -- Instance Variable of calendarDuration: ‘char’ Sign

     The sign (1 or -1) of this duration, which indicates whether it is
     a positive or negative span of time.

 -- Instance Variable of calendarDuration: ‘char’ Years

     The number of whole calendar years in this duration.  Must be
     integer-valued.

 -- Instance Variable of calendarDuration: ‘char’ Months

     The number of whole calendar months in this duration.  Must be
     integer-valued.

 -- Instance Variable of calendarDuration: ‘char’ Days

     The number of whole calendar days in this duration.  Must be
     integer-valued.

 -- Instance Variable of calendarDuration: ‘char’ Hours

     The number of whole hours in this duration.  Must be
     integer-valued.

 -- Instance Variable of calendarDuration: ‘char’ Minutes

     The number of whole minutes in this duration.  Must be
     integer-valued.

 -- Instance Variable of calendarDuration: ‘char’ Seconds

     The number of seconds in this duration.  May contain fractional
     values.

 -- Instance Variable of calendarDuration: ‘char’ Format

     The format to display this ‘calendarDuration’ in.  Currently
     unsupported.

     This is a single value that applies to the whole array.

* Menu:

* calendarDuration.calendarDuration::
* calendarDuration.isnat::
* calendarDuration.uminus::
* calendarDuration.plus::
* calendarDuration.times::
* calendarDuration.minus::
* calendarDuration.dispstrs::
* calendarDuration.isnan::


File: chrono.info,  Node: calendarDuration.calendarDuration,  Next: calendarDuration.isnat,  Up: calendarDuration

7.2.1.1 calendarDuration.calendarDuration
.........................................

 -- Constructor: OBJ = calendarDuration ()

     Constructs a new scalar ‘calendarDuration’ of zero elapsed time.

 -- Constructor: OBJ = calendarDuration (Y, M, D)
 -- Constructor: OBJ = calendarDuration (Y, M, D, H, MI, S)

     Constructs new ‘calendarDuration’ arrays based on input values.


File: chrono.info,  Node: calendarDuration.isnat,  Next: calendarDuration.uminus,  Prev: calendarDuration.calendarDuration,  Up: calendarDuration

7.2.1.2 calendarDuration.isnat
..............................

 -- Method: OUT = isnat (OBJ)

     True if input elements are NaT.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: calendarDuration.uminus,  Next: calendarDuration.plus,  Prev: calendarDuration.isnat,  Up: calendarDuration

7.2.1.3 calendarDuration.uminus
...............................

 -- Method: OUT = uminus (OBJ)

     Unary minus.  Negates the sign of OBJ.


File: chrono.info,  Node: calendarDuration.plus,  Next: calendarDuration.times,  Prev: calendarDuration.uminus,  Up: calendarDuration

7.2.1.4 calendarDuration.plus
.............................

 -- Method: OUT = plus (A, B)

     Addition: add two ‘calendarDuration’s.

     All the calendar elements (properties) of the two inputs are added
     together.  No normalization is done across the elements, aside from
     the normalization of NaNs.

     If B is numeric, it is converted to a ‘calendarDuration’ using
     ‘calendarDuration.ofDays’.

     Returns a ‘calendarDuration’.


File: chrono.info,  Node: calendarDuration.times,  Next: calendarDuration.minus,  Prev: calendarDuration.plus,  Up: calendarDuration

7.2.1.5 calendarDuration.times
..............................

 -- Method: OUT = times (OBJ, B)

     Multiplication: Multiplies a ‘calendarDuration’ by a numeric
     factor.

     Returns a ‘calendarDuration’.


File: chrono.info,  Node: calendarDuration.minus,  Next: calendarDuration.dispstrs,  Prev: calendarDuration.times,  Up: calendarDuration

7.2.1.6 calendarDuration.minus
..............................

 -- Method: OUT = times (A, B)

     Subtraction: Subtracts one ‘calendarDuration’ from another.

     Returns a ‘calendarDuration’.


File: chrono.info,  Node: calendarDuration.dispstrs,  Next: calendarDuration.isnan,  Prev: calendarDuration.minus,  Up: calendarDuration

7.2.1.7 calendarDuration.dispstrs
.................................

 -- Method: OUT = dispstrs (OBJ)

     Get display strings for each element of OBJ.

     Returns a cellstr the same size as OBJ.


File: chrono.info,  Node: calendarDuration.isnan,  Prev: calendarDuration.dispstrs,  Up: calendarDuration

7.2.1.8 calendarDuration.isnan
..............................

 -- Method: OUT = isnan (OBJ)

     True if input elements are NaT. This is just an alias for ‘isnat’,
     provided for compatibility and polymorphic programming purposes.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: calmonths,  Next: calyears,  Prev: calendarDuration,  Up: Functions Alphabetically

7.2.2 calmonths
---------------

 -- Function File: OUT = calmonths (X)
     Create a ‘calendarDuration’ that is a given number of calendar
     months long.

     Input X is a numeric array specifying the number of calendar
     months.

     This is a shorthand alternative to calling the ‘calendarDuration’
     constructor with ‘calendarDuration(0, x, 0)’.

     Returns a new ‘calendarDuration’ object of the same size as X.

     *Note calendarDuration::.


File: chrono.info,  Node: calyears,  Next: datetime,  Prev: calmonths,  Up: Functions Alphabetically

7.2.3 calyears
--------------

 -- Function: OUT = calyears (X)

     Construct a ‘calendarDuration’ a given number of years long.

     This is a shorthand for calling ‘calendarDuration(X, 0, 0)’.

     *Note calendarDuration::.


File: chrono.info,  Node: datetime,  Next: days,  Prev: calyears,  Up: Functions Alphabetically

7.2.4 datetime
--------------

 -- Class: datetime

     ‘datetime’ represents points in time using the Gregorian calendar.

     The underlying values are doubles representing the number of days
     since the Matlab epoch of "January 0, year 0".  This has a
     precision of around nanoseconds for typical times.

     A ‘datetime’ array is an array of date/time values, with each
     element holding a complete date/time.  The overall array may also
     have a TimeZone and a Format associated with it, which apply to all
     elements in the array.

     This is an attempt to reproduce the functionality of Matlab’s
     ‘datetime’.  It also contains some Octave-specific extensions.

 -- Instance Variable of datetime: ‘double’ dnums

     The underlying datenums that represent the points in time.  These
     are always in UTC.

     This is a planar property: the size of ‘dnums’ is the same size as
     the containing ‘datetime’ array object.

 -- Instance Variable of datetime: ‘char’ TimeZone

     The time zone this ‘datetime’ array is in.  Empty if this does not
     have a time zone associated with it (“unzoned”).  The name of an
     IANA time zone if this does.

     Setting the ‘TimeZone’ of a ‘datetime’ array changes the time zone
     it is presented in for strings and broken-down times, but does not
     change the underlying UTC times that its elements represent.

 -- Instance Variable of datetime: ‘char’ Format

     The format to display this ‘datetime’ in.  Currently unsupported.

* Menu:

* datetime.datetime::
* datetime.ofDatenum::
* datetime.ofDatestruct::
* datetime.posix2datenum::
* datetime.datenum2posix::
* datetime.proxyKeys::
* datetime.ymd::
* datetime.hms::
* datetime.ymdhms::
* datetime.timeofday::
* datetime.week::
* datetime.dispstrs::
* datetime.datestr::
* datetime.datestrs::
* datetime.datestruct::
* datetime.posixtime::
* datetime.datenum::
* datetime.isnat::
* datetime.isnan::
* datetime.lt::
* datetime.le::
* datetime.ne::
* datetime.eq::
* datetime.ge::
* datetime.gt::
* datetime.plus::
* datetime.minus::
* datetime.diff::
* datetime.isbetween::
* datetime.linspace::
* datetime.convertDatenumTimeZone::


File: chrono.info,  Node: datetime.datetime,  Next: datetime.ofDatenum,  Up: datetime

7.2.4.1 datetime.datetime
.........................

 -- Constructor: OBJ = datetime ()

     Constructs a new scalar ‘datetime’ containing the current local
     time, with no time zone attached.

 -- Constructor: OBJ = datetime (DATEVEC)
 -- Constructor: OBJ = datetime (DATESTRS)
 -- Constructor: OBJ = datetime (IN, ‘'ConvertFrom'’, INTYPE)
 -- Constructor: OBJ = datetime (Y, M, D, H, MI, S)
 -- Constructor: OBJ = datetime (Y, M, D, H, MI, MS)
 -- Constructor: OBJ = datetime (..., ‘'Format'’, FORMAT,
          ‘'InputFormat'’, INPUTFORMAT, ‘'Locale'’, INPUTLOCALE,
          ‘'PivotYear'’, PIVOTYEAR, ‘'TimeZone'’, TIMEZONE)

     Constructs a new ‘datetime’ array based on input values.


File: chrono.info,  Node: datetime.ofDatenum,  Next: datetime.ofDatestruct,  Prev: datetime.datetime,  Up: datetime

7.2.4.2 datetime.ofDatenum
..........................

 -- Static Method: OBJ = datetime.ofDatenum (DNUMS)

     Converts a datenum array to a datetime array.

     Returns an unzoned ‘datetime’ array of the same size as the input.


File: chrono.info,  Node: datetime.ofDatestruct,  Next: datetime.posix2datenum,  Prev: datetime.ofDatenum,  Up: datetime

7.2.4.3 datetime.ofDatestruct
.............................

 -- Static Method: OBJ = datetime.ofDatestruct (DSTRUCT)

     Converts a datestruct to a datetime array.

     A datestruct is a special struct format used by Chrono that has
     fields Year, Month, Day, Hour, Minute, and Second.  It is not a
     standard Octave datatype.

     Returns an unzoned ‘datetime’ array.


File: chrono.info,  Node: datetime.posix2datenum,  Next: datetime.datenum2posix,  Prev: datetime.ofDatestruct,  Up: datetime

7.2.4.4 datetime.posix2datenum
..............................

 -- Static Method: DNUMS = datetime.posix2datenum (PDATES)

     Converts POSIX (Unix) times to datenums

     Pdates (numeric) is an array of POSIX dates.  A POSIX date is the
     number of seconds since January 1, 1970 UTC, excluding leap
     seconds.  The output is implicitly in UTC.


File: chrono.info,  Node: datetime.datenum2posix,  Next: datetime.proxyKeys,  Prev: datetime.posix2datenum,  Up: datetime

7.2.4.5 datetime.datenum2posix
..............................

 -- Static Method: OUT = datetime.datenum2posix (DNUMS)

     Converts Octave datenums to Unix dates.

     The input datenums are assumed to be in UTC.

     Returns a double, which may have fractional seconds.


File: chrono.info,  Node: datetime.proxyKeys,  Next: datetime.ymd,  Prev: datetime.datenum2posix,  Up: datetime

7.2.4.6 datetime.proxyKeys
..........................

 -- Method: [KEYSA, KEYSB] = proxyKeys (A, B)

     Computes proxy key values for two datetime arrays.  Proxy keys are
     numeric values whose rows have the same equivalence relationships
     as the elements of the inputs.

     This is primarily for Chrono’s internal use; users will typically
     not need to call it or know how it works.

     Returns two 2-D numeric matrices of size n-by-k, where n is the
     number of elements in the corresponding input.


File: chrono.info,  Node: datetime.ymd,  Next: datetime.hms,  Prev: datetime.proxyKeys,  Up: datetime

7.2.4.7 datetime.ymd
....................

 -- Method: [Y, M, D] = ymd (OBJ)

     Get the Year, Month, and Day components of a OBJ.

     For zoned ‘datetime’s, these will be local times in the associated
     time zone.

     Returns double arrays the same size as ‘obj’.


File: chrono.info,  Node: datetime.hms,  Next: datetime.ymdhms,  Prev: datetime.ymd,  Up: datetime

7.2.4.8 datetime.hms
....................

 -- Method: [H, M, S] = hms (OBJ)

     Get the Hour, Minute, and Second components of a OBJ.

     For zoned ‘datetime’s, these will be local times in the associated
     time zone.

     Returns double arrays the same size as ‘obj’.


File: chrono.info,  Node: datetime.ymdhms,  Next: datetime.timeofday,  Prev: datetime.hms,  Up: datetime

7.2.4.9 datetime.ymdhms
.......................

 -- Method: [Y, M, D, H, MI, S] = ymdhms (OBJ)

     Get the Year, Month, Day, Hour, Minute, and Second components of a
     OBJ.

     For zoned ‘datetime’s, these will be local times in the associated
     time zone.

     Returns double arrays the same size as ‘obj’.


File: chrono.info,  Node: datetime.timeofday,  Next: datetime.week,  Prev: datetime.ymdhms,  Up: datetime

7.2.4.10 datetime.timeofday
...........................

 -- Method: OUT = timeofday (OBJ)

     Get the time of day (elapsed time since midnight).

     For zoned ‘datetime’s, these will be local times in the associated
     time zone.

     Returns a ‘duration’ array the same size as ‘obj’.


File: chrono.info,  Node: datetime.week,  Next: datetime.dispstrs,  Prev: datetime.timeofday,  Up: datetime

7.2.4.11 datetime.week
......................

 -- Method: OUT = week (OBJ)

     Get the week of the year.

     This method is unimplemented.


File: chrono.info,  Node: datetime.dispstrs,  Next: datetime.datestr,  Prev: datetime.week,  Up: datetime

7.2.4.12 datetime.dispstrs
..........................

 -- Method: OUT = dispstrs (OBJ)

     Get display strings for each element of OBJ.

     Returns a cellstr the same size as OBJ.


File: chrono.info,  Node: datetime.datestr,  Next: datetime.datestrs,  Prev: datetime.dispstrs,  Up: datetime

7.2.4.13 datetime.datestr
.........................

 -- Method: OUT = datestr (OBJ)
 -- Method: OUT = datestr (OBJ, ...)

     Format OBJ as date strings.  Supports all arguments that core
     Octave’s ‘datestr’ does.

     Returns date strings as a 2-D char array.


File: chrono.info,  Node: datetime.datestrs,  Next: datetime.datestruct,  Prev: datetime.datestr,  Up: datetime

7.2.4.14 datetime.datestrs
..........................

 -- Method: OUT = datestrs (OBJ)
 -- Method: OUT = datestrs (OBJ, ...)

     Format OBJ as date strings, returning cellstr.  Supports all
     arguments that core Octave’s ‘datestr’ does.

     Returns a cellstr array the same size as OBJ.


File: chrono.info,  Node: datetime.datestruct,  Next: datetime.posixtime,  Prev: datetime.datestrs,  Up: datetime

7.2.4.15 datetime.datestruct
............................

 -- Method: OUT = datestruct (OBJ)

     Converts this to a "datestruct" broken-down time structure.

     A "datestruct" is a format of struct that Chrono came up with.  It
     is a scalar struct with fields Year, Month, Day, Hour, Minute, and
     Second, each containing a double array the same size as the date
     array it represents.

     The values in the returned broken-down time are those of the local
     time in this’ defined time zone, if it has one.

     Returns a struct with fields Year, Month, Day, Hour, Minute, and
     Second.  Each field contains a double array of the same size as
     this.

     This is an Octave extension.


File: chrono.info,  Node: datetime.posixtime,  Next: datetime.datenum,  Prev: datetime.datestruct,  Up: datetime

7.2.4.16 datetime.posixtime
...........................

 -- Method: OUT = posixtime (OBJ)

     Converts this to POSIX time values (seconds since the Unix epoch)

     Converts this to POSIX time values that represent the same time.
     The returned values will be doubles that may include fractional
     second values.  POSIX times are, by definition, in UTC.

     Returns double array of same size as this.


File: chrono.info,  Node: datetime.datenum,  Next: datetime.isnat,  Prev: datetime.posixtime,  Up: datetime

7.2.4.17 datetime.datenum
.........................

 -- Method: OUT = datenum (OBJ)

     DATENUM Convert this to datenums that represent the same local time

     Returns double array of same size as this.


File: chrono.info,  Node: datetime.isnat,  Next: datetime.isnan,  Prev: datetime.datenum,  Up: datetime

7.2.4.18 datetime.isnat
.......................

 -- Method: OUT = isnat (OBJ)

     True if input elements are NaT.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.isnan,  Next: datetime.lt,  Prev: datetime.isnat,  Up: datetime

7.2.4.19 datetime.isnan
.......................

 -- Method: OUT = isnan (OBJ)

     True if input elements are NaT. This is an alias for ‘isnat’ to
     support type compatibility and polymorphic programming.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.lt,  Next: datetime.le,  Prev: datetime.isnan,  Up: datetime

7.2.4.20 datetime.lt
....................

 -- Method: OUT = lt (A, B)

     True if A is less than B.  This defines the ‘<’ operator for
     ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.le,  Next: datetime.ne,  Prev: datetime.lt,  Up: datetime

7.2.4.21 datetime.le
....................

 -- Method: OUT = le (A, B)

     True if A is less than or equal toB.  This defines the ‘<=’
     operator for ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.ne,  Next: datetime.eq,  Prev: datetime.le,  Up: datetime

7.2.4.22 datetime.ne
....................

 -- Method: OUT = ne (A, B)

     True if A is not equal to B.  This defines the ‘!=’ operator for
     ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.eq,  Next: datetime.ge,  Prev: datetime.ne,  Up: datetime

7.2.4.23 datetime.eq
....................

 -- Method: OUT = eq (A, B)

     True if A is equal to B.  This defines the ‘==’ operator for
     ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.ge,  Next: datetime.gt,  Prev: datetime.eq,  Up: datetime

7.2.4.24 datetime.ge
....................

 -- Method: OUT = ge (A, B)

     True if A is greater than or equal to B.  This defines the ‘>=’
     operator for ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.gt,  Next: datetime.plus,  Prev: datetime.ge,  Up: datetime

7.2.4.25 datetime.gt
....................

 -- Method: OUT = gt (A, B)

     True if A is greater than B.  This defines the ‘>’ operator for
     ‘datetime’s.

     Inputs are implicitly converted to ‘datetime’ using the one-arg
     constructor or conversion method.

     Returns logical array the same size as OBJ.


File: chrono.info,  Node: datetime.plus,  Next: datetime.minus,  Prev: datetime.gt,  Up: datetime

7.2.4.26 datetime.plus
......................

 -- Method: OUT = plus (A, B)

     Addition (‘+’ operator).  Adds a ‘duration’, ‘calendarDuration’, or
     numeric B to a ‘datetime’ A.

     Numeric B inputs are implicitly converted to ‘duration’ using
     ‘duration.ofDays’.

     Returns ‘datetime’ array the same size as A.


File: chrono.info,  Node: datetime.minus,  Next: datetime.diff,  Prev: datetime.plus,  Up: datetime

7.2.4.27 datetime.minus
.......................

 -- Method: OUT = minus (A, B)

     Subtraction (‘-’ operator).  Subtracts a ‘duration’,
     ‘calendarDuration’ or numeric B from a ‘datetime’ A, or subtracts
     two ‘datetime’s from each other.

     If both inputs are ‘datetime’, then the output is a ‘duration’.
     Otherwise, the output is a ‘datetime’.

     Numeric B inputs are implicitly converted to ‘duration’ using
     ‘duration.ofDays’.

     Returns an array the same size as A.


File: chrono.info,  Node: datetime.diff,  Next: datetime.isbetween,  Prev: datetime.minus,  Up: datetime

7.2.4.28 datetime.diff
......................

 -- Method: OUT = diff (OBJ)

     Differences between elements.

     Computes the difference between each successive element in OBJ, as
     a ‘duration’.

     Returns a ‘duration’ array the same size as OBJ.


File: chrono.info,  Node: datetime.isbetween,  Next: datetime.linspace,  Prev: datetime.diff,  Up: datetime

7.2.4.29 datetime.isbetween
...........................

 -- Method: OUT = isbetween (OBJ, LOWER, UPPER)

     Tests whether the elements of OBJ are between LOWER and UPPER.

     All inputs are implicitly converted to ‘datetime’ arrays, and are
     subject to scalar expansion.

     Returns a logical array the same size as the scalar expansion of
     the inputs.


File: chrono.info,  Node: datetime.linspace,  Next: datetime.convertDatenumTimeZone,  Prev: datetime.isbetween,  Up: datetime

7.2.4.30 datetime.linspace
..........................

 -- Method: OUT = linspace (FROM, TO, N)

     Linearly-spaced values in date/time space.

     Constructs a vector of ‘datetime’s that represent linearly spaced
     points starting at FROM and going up to TO, with N points in the
     vector.

     FROM and TO are implicitly converted to ‘datetime’s.

     N is how many points to use.  If omitted, defaults to 100.

     Returns an N-long ‘datetime’ vector.


File: chrono.info,  Node: datetime.convertDatenumTimeZone,  Prev: datetime.linspace,  Up: datetime

7.2.4.31 datetime.convertDatenumTimeZone
........................................

 -- Static Method: OUT = datetime.convertDatenumTimeZone (DNUM,
          FROMZONEID, TOZONEID)

     Convert a datenum from one time zone to another.

     DNUM is a datenum array to convert.

     FROMZONEID is a charvec containing the IANA Time Zone identifier
     for the time zone to convert from.

     TOZONEID is a charvec containing the IANA Time Zone identifier for
     the time zone to convert to.

     Returns a datenum array the same size as DNUM.


File: chrono.info,  Node: days,  Next: duration,  Prev: datetime,  Up: Functions Alphabetically

7.2.5 days
----------

 -- Function: OUT = days (X)

     Duration in days.

     If X is numeric, then OUT is a ‘duration’ array in units of
     fixed-length 24-hour days, with the same size as X.

     If X is a ‘duration’, then returns a ‘double’ array the same size
     as X indicating the number of fixed-length days that each duration
     is.


File: chrono.info,  Node: duration,  Next: hours,  Prev: days,  Up: Functions Alphabetically

7.2.6 duration
--------------

 -- Class: duration

     Represents durations or periods of time as an amount of
     fixed-length time (i.e.  fixed-length seconds).  It does not care
     about calendar things like months and days that vary in length over
     time.

     This is an attempt to reproduce the functionality of Matlab’s
     ‘duration’.  It also contains some Octave-specific extensions.

 -- Instance Variable of duration: ‘double’ days

     The underlying datenums that represent the durations, as number of
     (whole and fractional) days.  These are uniform 24-hour days, not
     calendar days.

     This is a planar property: the size of ‘days’ is the same size as
     the containing ‘duration’ array object.

 -- Instance Variable of duration: ‘char’ Format

     The format to display this ‘duration’ in.  Currently unsupported.

* Menu:

* duration.duration::
* duration.ofDays::
* duration.years::
* duration.hours::
* duration.minutes::
* duration.seconds::
* duration.milliseconds::
* duration.dispstrs::
* duration.char::
* duration.linspace::


File: chrono.info,  Node: duration.duration,  Next: duration.ofDays,  Up: duration

7.2.6.1 duration.duration
.........................

 -- Constructor: OBJ = duration ()

     Constructs a new scalar ‘duration’ of zero elapsed time.

 -- Constructor: OBJ = duration (DURATIONSTRS)
 -- Constructor: OBJ = duration (DURATIONSTRS, ‘'InputFormat'’,
          INPUTFORMAT)
 -- Constructor: OBJ = duration (H, MI, S)
 -- Constructor: OBJ = duration (H, MI, S, MS)

     Constructs a new ‘duration’ array based on input values.


File: chrono.info,  Node: duration.ofDays,  Next: duration.years,  Prev: duration.duration,  Up: duration

7.2.6.2 duration.ofDays
.......................

 -- Static Method: OBJ = duration.ofDays (DNUMS)

     Converts a double array representing durations in whole and
     fractional days to a ‘duration’ array.  This is the method that is
     used for implicit conversion of numerics in many cases.

     Returns a ‘duration’ array of the same size as the input.


File: chrono.info,  Node: duration.years,  Next: duration.hours,  Prev: duration.ofDays,  Up: duration

7.2.6.3 duration.years
......................

 -- Method: OUT = years (OBJ)

     Equivalent number of years.

     Gets the number of fixed-length 365.2425-day years that is
     equivalent to this duration.

     Returns double array the same size as OBJ.


File: chrono.info,  Node: duration.hours,  Next: duration.minutes,  Prev: duration.years,  Up: duration

7.2.6.4 duration.hours
......................

 -- Method: OUT = hours (OBJ)

     Equivalent number of hours.

     Gets the number of fixed-length 60-minute hours that is equivalent
     to this duration.

     Returns double array the same size as OBJ.


File: chrono.info,  Node: duration.minutes,  Next: duration.seconds,  Prev: duration.hours,  Up: duration

7.2.6.5 duration.minutes
........................

 -- Method: OUT = minutes (OBJ)

     Equivalent number of minutes.

     Gets the number of fixed-length 60-second minutes that is
     equivalent to this duration.

     Returns double array the same size as OBJ.


File: chrono.info,  Node: duration.seconds,  Next: duration.milliseconds,  Prev: duration.minutes,  Up: duration

7.2.6.6 duration.seconds
........................

 -- Method: OUT = seconds (OBJ)

     Equivalent number of seconds.

     Gets the number of seconds that is equivalent to this duration.

     Returns double array the same size as OBJ.


File: chrono.info,  Node: duration.milliseconds,  Next: duration.dispstrs,  Prev: duration.seconds,  Up: duration

7.2.6.7 duration.milliseconds
.............................

 -- Method: OUT = milliseconds (OBJ)

     Equivalent number of milliseconds.

     Gets the number of milliseconds that is equivalent to this
     duration.

     Returns double array the same size as OBJ.


File: chrono.info,  Node: duration.dispstrs,  Next: duration.char,  Prev: duration.milliseconds,  Up: duration

7.2.6.8 duration.dispstrs
.........................

 -- Method: OUT = duration (OBJ)

     Get display strings for each element of OBJ.

     Returns a cellstr the same size as OBJ.


File: chrono.info,  Node: duration.char,  Next: duration.linspace,  Prev: duration.dispstrs,  Up: duration

7.2.6.9 duration.char
.....................

 -- Method: OUT = char (OBJ)

     Convert to char.  The contents of the strings will be the same as
     returned by ‘dispstrs’.

     This is primarily a convenience method for use on scalar OBJs.

     Returns a 2-D char array with one row per element in OBJ.


File: chrono.info,  Node: duration.linspace,  Prev: duration.char,  Up: duration

7.2.6.10 duration.linspace
..........................

 -- Method: OUT = linspace (FROM, TO, N)

     Linearly-spaced values in time duration space.

     Constructs a vector of ‘duration’s that represent linearly spaced
     points starting at FROM and going up to TO, with N points in the
     vector.

     FROM and TO are implicitly converted to ‘duration’s.

     N is how many points to use.  If omitted, defaults to 100.

     Returns an N-long ‘datetime’ vector.


File: chrono.info,  Node: hours,  Next: isdatetime,  Prev: duration,  Up: Functions Alphabetically

7.2.7 hours
-----------

 -- Function File: OUT = hours (X)
     Create a ‘duration’ X hours long, or get the hours in a ‘duration’
     X.

     If input is numeric, returns a ‘duration’ array that is that many
     hours in time.

     If input is a ‘duration’, converts the ‘duration’ to a number of
     hours.

     Returns an array the same size as X.


File: chrono.info,  Node: isdatetime,  Next: isduration,  Prev: hours,  Up: Functions Alphabetically

7.2.8 isdatetime
----------------

 -- Function: TF = isdatetime (X)

     True if input is a ‘datetime’ array, false otherwise.

     Returns a logical array the same size as X.


File: chrono.info,  Node: isduration,  Next: milliseconds,  Prev: isdatetime,  Up: Functions Alphabetically

7.2.9 isduration
----------------

 -- Function: TF = isduration (X)

     True if input is a ‘duration’ array, false otherwise.

     Returns a logical array the same size as X.


File: chrono.info,  Node: milliseconds,  Next: minutes,  Prev: isduration,  Up: Functions Alphabetically

7.2.10 milliseconds
-------------------

 -- Function File: OUT = milliseconds (X)
     Create a ‘duration’ X milliseconds long, or get the milliseconds in
     a ‘duration’ X.

     If input is numeric, returns a ‘duration’ array that is that many
     milliseconds in time.

     If input is a ‘duration’, converts the ‘duration’ to a number of
     milliseconds.

     Returns an array the same size as X.


File: chrono.info,  Node: minutes,  Next: NaT,  Prev: milliseconds,  Up: Functions Alphabetically

7.2.11 minutes
--------------

 -- Function File: OUT = hours (X)
     Create a ‘duration’ X hours long, or get the hours in a ‘duration’
     X.


File: chrono.info,  Node: NaT,  Next: seconds,  Prev: minutes,  Up: Functions Alphabetically

7.2.12 NaT
----------

 -- Function: OUT = NaT ()
 -- Function: OUT = NaT (SZ)

     “Not-a-Time”.  Creates NaT-valued arrays.

     Constructs a new ‘datetime’ array of all ‘NaT’ values of the given
     size.  If no input SZ is given, the result is a scalar ‘NaT’.

     ‘NaT’ is the ‘datetime’ equivalent of ‘NaN’.  It represents a
     missing or invalid value.  ‘NaT’ values never compare equal to,
     greater than, or less than any value, including other ‘NaT’s.
     Doing arithmetic with a ‘NaT’ and any other value results in a
     ‘NaT’.


File: chrono.info,  Node: seconds,  Next: timezones,  Prev: NaT,  Up: Functions Alphabetically

7.2.13 seconds
--------------

 -- Function File: OUT = seconds (X)
     Create a ‘duration’ X seconds long, or get the seconds in a
     ‘duration’ X.

     If input is numeric, returns a ‘duration’ array that is that many
     seconds in time.

     If input is a ‘duration’, converts the ‘duration’ to a number of
     seconds.

     Returns an array the same size as X.


File: chrono.info,  Node: timezones,  Next: years,  Prev: seconds,  Up: Functions Alphabetically

7.2.14 timezones
----------------

 -- Function: OUT = timezones ()
 -- Function: OUT = timezones (AREA)

     List all the time zones defined on this system.

     This lists all the time zones that are defined in the IANA time
     zone database used by this Octave.  (On Linux and macOS, that will
     generally be the system time zone database from
     ‘/usr/share/zoneinfo’.  On Windows, it will be the database
     redistributed with the Chrono package.

     If the return is captured, the output is returned as a table if
     your Octave has table support, or a struct if it does not.  It will
     have fields/variables containing column vectors:

     ‘Name’
          The IANA zone name, as cellstr.
     ‘Area’
          The geographical area the zone is in, as cellstr.

     Compatibility note: Matlab also includes UTCOffset and DSTOffset
     fields in the output; these are currently unimplemented.


File: chrono.info,  Node: years,  Prev: timezones,  Up: Functions Alphabetically

7.2.15 years
------------

 -- Function File: OUT = years (X)
     Create a ‘duration’ X years long, or get the years in a ‘duration’
     X.

     If input is numeric, returns a ‘duration’ array in units of
     fixed-length years of 365.2425 days each.

     If input is a ‘duration’, converts the ‘duration’ to a number of
     fixed-length years as double.

     Note: ‘years’ creates fixed-length years, which may not be what you
     want.  To create a duration of calendar years (which account for
     actual leap days), use ‘calyears’.

     *Note calyears::.


File: chrono.info,  Node: Copying,  Prev: Function Reference,  Up: Top

8 Copying
*********

8.1 Package Copyright
=====================

Chrono for Octave is covered by the GNU GPLv3, the Unicode License, and
Public Domain.

   All the code in the package is GNU GPLv3.

   The IANA Time Zone Database redistributed with the package is Public
Domain.

   The Windows Zones file redistributed with the package is covered by
the Unicode License (http://www.unicode.org/copyright.html).

8.2 Manual Copyright
====================

This manual is for Chrono, version 0.3.1.

   Copyright © 2019 Andrew Janke

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     that the entire resulting derived work is distributed under the
     terms of a permission notice identical to this one.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the same conditions as for
     modified versions.



Tag Table:
Node: Top760
Node: Introduction1063
Node: Getting Started2273
Node: Date Representation3137
Node: datetime Class3388
Node: datenum Compatibility4217
Node: Time Zones5757
Node: Defined Time Zones8590
Node: Durations9561
Node: duration Class9740
Node: calendarDuration Class10491
Node: Missing Functionality11392
Node: Function Reference12361
Node: Functions by Category12573
Node: Functions Alphabetically14238
Node: calendarDuration15665
Node: calendarDuration.calendarDuration17551
Node: calendarDuration.isnat18057
Node: calendarDuration.uminus18388
Node: calendarDuration.plus18667
Node: calendarDuration.times19272
Node: calendarDuration.minus19629
Node: calendarDuration.dispstrs19974
Node: calendarDuration.isnan20314
Node: calmonths20714
Node: calyears21305
Node: datetime21648
Node: datetime.datetime23977
Node: datetime.ofDatenum24795
Node: datetime.ofDatestruct25151
Node: datetime.posix2datenum25660
Node: datetime.datenum2posix26142
Node: datetime.proxyKeys26543
Node: datetime.ymd27183
Node: datetime.hms27571
Node: datetime.ymdhms27960
Node: datetime.timeofday28397
Node: datetime.week28813
Node: datetime.dispstrs29069
Node: datetime.datestr29364
Node: datetime.datestrs29752
Node: datetime.datestruct30169
Node: datetime.posixtime31002
Node: datetime.datenum31532
Node: datetime.isnat31852
Node: datetime.isnan32127
Node: datetime.lt32494
Node: datetime.le32921
Node: datetime.ne33357
Node: datetime.eq33785
Node: datetime.ge34209
Node: datetime.gt34649
Node: datetime.plus35078
Node: datetime.minus35536
Node: datetime.diff36177
Node: datetime.isbetween36553
Node: datetime.linspace37037
Node: datetime.convertDatenumTimeZone37646
Node: days38296
Node: duration38760
Node: duration.duration39960
Node: duration.ofDays40498
Node: duration.years40977
Node: duration.hours41343
Node: duration.minutes41707
Node: duration.seconds42083
Node: duration.milliseconds42438
Node: duration.dispstrs42824
Node: duration.char43122
Node: duration.linspace43545
Node: hours44113
Node: isdatetime44594
Node: isduration44882
Node: milliseconds45177
Node: minutes45715
Node: NaT45971
Node: seconds46663
Node: timezones47156
Node: years48189
Node: Copying48871

End Tag Table


Local Variables:
coding: utf-8
End:
